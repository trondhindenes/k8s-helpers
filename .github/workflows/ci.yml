name: ci

on:
  push:
    branches:
      - main
  pull_request: 

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is-prerelease: ${{ steps.get_version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: get_version
        uses: trondhindenes/autoversion-action@v1
        with:
          config-flags: 'mode=pep440'

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

#    - name: Run tests (if test directory exists)
#      run: |
#        if [ -d "tests" ]; then
#          uv run pytest
#        else
#          echo "No tests directory found, skipping tests"
#        fi
#      continue-on-error: true

  build:
    needs:
      - test
      - get-version
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Set version
      run: |
        echo "Setting version to ${{ needs.get-version.outputs.version }}"
        sed -i "s/^version = .*/version = \"${{ needs.get-version.outputs.version }}\"/" pyproject.toml

    - name: Build package
      run: uv build

    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    needs:
      - build
      - get-version
    runs-on: ubuntu-latest
    if: needs.get-version.outputs.is-prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/p/k8s-helpers
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  # publish-to-testpypi:
  #   needs:
  #     - build
  #     - get-version
  #   runs-on: ubuntu-latest
  #   #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment:
  #     name: testpypi
  #     url: https://test.pypi.org/p/k8s-utils
  #   permissions:
  #     id-token: write

  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: python-package-distributions
  #       path: dist/

  #   - name: Publish to TestPyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       repository-url: https://test.pypi.org/legacy/
